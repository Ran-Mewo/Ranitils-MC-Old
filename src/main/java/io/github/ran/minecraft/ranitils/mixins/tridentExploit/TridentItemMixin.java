package io.github.ran.minecraft.ranitils.mixins.tridentExploit;

import io.github.ran.minecraft.ranitils.RanitilsMod;
import io.github.ran.minecraft.ranitils.config.ModConfig;
import net.minecraft.world.entity.player.Player;
import net.minecraft.world.item.TridentItem;
import org.spongepowered.asm.mixin.Mixin;
import org.spongepowered.asm.mixin.injection.At;
import org.spongepowered.asm.mixin.injection.Constant;
import org.spongepowered.asm.mixin.injection.ModifyConstant;
import org.spongepowered.asm.mixin.injection.Redirect;

// Exploit originally discovered by Ran (creator of this mod) & code written by CodeF53 (since Ran kept forgetting about this)
@Mixin(TridentItem.class)
public class TridentItemMixin {
    // Makes player always allowed to use riptide tridents
    @Redirect(method = "releaseUsing", at = @At(value = "INVOKE", target = "Lnet/minecraft/world/entity/player/Player;isInWaterOrRain()Z"))
    private boolean alwaysWetRelease(Player player) {
        if (ModConfig.getInstance().tridentExploit)
            return true;
        return player.isInWaterOrRain();
    }
    @Redirect(method = "use", at = @At(value = "INVOKE", target = "Lnet/minecraft/world/entity/player/Player;isInWaterOrRain()Z"))
    private boolean alwaysWetHold(Player player) {
        if (ModConfig.getInstance().tridentExploit)
            return true;
        return player.isInWaterOrRain();
    }

    // Makes it so you don't have to hold down for very long to use riptide
    @ModifyConstant(method = "releaseUsing", constant = @Constant(intValue = 10))
    private int noCooldown(int constant) {
        if (ModConfig.getInstance().tridentExploit)
            return -1;
        return constant;
    }
}
